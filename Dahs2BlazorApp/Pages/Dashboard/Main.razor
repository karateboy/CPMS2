@inject PipeIo PipeIo
@inject MonitorTypeIo MonitorTypeIo
@inject DataCollectManager DataCollectManager
@inject MeasuringAdjust MeasuringAdjust
@using Dahs2BlazorApp.Models
@implements IDisposable
<div class="p-3">
    <table class="table table-bordered table-striped table-hover table-sm shadow">
        <thead>
        <tr>
            <th class="text-center">測項</th>
            <th class="text-center">原始值</th>
            <th class="text-center">修正值</th>
            <th class="text-center">排放標準</th>
            <th class="text-center">範圍</th>
            <th class="text-center">狀態</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var pipe in PipeIo.Pipes)
        {
            @foreach (var mt in GetCemsMonitorTypes(pipe.Id))
            {
                <tr>
                    <th>@($"{mt.Name}")</th>
                    <td class="@($"{GetPipeRawRecord(pipe.Id, mt.Sid).ToRecordStatus(mt, checkOverRange:false).ToBlinkCss()}")">
                        @FormatValue(mt.Sid, GetPipeRawRecord(pipe.Id, mt.Sid))&nbsp;@mt.Unit
                    </td>
                    <td class="@($"{GetPipeAdjustedRecord(pipe.Id, mt.Sid).ToRecordStatus(mt, checkOverRange:true).ToBlinkCss()}")">
                        @FormatValue(mt.Sid, GetPipeAdjustedRecord(pipe.Id, mt.Sid))&nbsp;@mt.Unit2
                    </td>
                    <td>@mt.Standard</td>
                    <td>@GetNormalRange(pipe.Id, mt.Sid)</td>
                    <td>@FormatStatus(GetPipeAdjustedRecord(pipe.Id, mt.Sid))</td>
                </tr>
            }
            @foreach (var mt in GetPemsMonitorTypes(pipe.Id))
            {
                <tr>
                    <th>@($"{mt.Name}")</th>
                    <td class="@($"{GetPipeRawRecord(pipe.Id, mt.Sid).ToRecordStatus(mt, checkOverRange:true).ToBlinkCss()}")">
                        @FormatValue(mt.Sid, GetPipeRawRecord(pipe.Id, mt.Sid))&nbsp;@mt.Unit
                    </td>
                    <td></td>
                    <td>@mt.Standard</td>
                    <td>@GetNormalRange(pipe.Id, mt.Sid)</td>
                    <td>@FormatStatus(GetPipeRawRecord(pipe.Id, mt.Sid))</td>
                </tr>
            }
        }
        </tbody>
    </table>
    <br/>
    <div class="row g-1">
        @if (_playAlert)
        {
            <audio autoplay loop>
                <source src="/audio/alert.wav"/>
            </audio>
        }
    </div>
</div>
<style>
    .widget-header {
        background-color: darkblue;
        color: white;
        font-size: medium;
    }

    .widget-raw {
        background-color: black;
        color: white;
        font-size: medium;
    }

    .widget-adjusted {
        background-color: black;
        color: limegreen;
        font-size: large;
        font-weight: bolder;
    }

    .widget-state {
        background: black;
        color: white;
        font-size: small;
        font-weight: bolder;
    }

    .e-card {
        /* Permalink - use to edit and share this gradient: https://colorzilla.com/gradient-editor/#b4e391+0,61c419+50,b4e391+100;Green+3D */
        background: linear-gradient(to bottom, rgba(180, 227, 145, 1) 0%, rgba(97, 196, 25, 1) 50%, rgba(180, 227, 145, 1) 100%);
        padding: 0 5px 5px 5px;
        margin: 5px;
        font-size: 13px;
    }

    .e-card .e-card-header {
        padding-top: 5px;
        font-family: sans-serif;
        font-weight: bolder;
    }

    .e-card .e-card-content {
        font-size: 13px;
        color: rgb(128, 128, 128);
        line-height: initial;
        font-weight: normal;
    }

    .match-height .col {
        display: flex;
        flex-flow: column;
    }

    .match-height .col > div {
        flex: 1;
    }

</style>

@code {
    private Timer? _timer;
    Dictionary<int, Dictionary<string, Record>> _pipeRawRecordMap = new();
    Dictionary<int, Dictionary<string, Record>> _pipeAdjustedRecordMap = new();

    bool _playAlert = false;

    private bool EvaluateAlert()
    {
        var cems = PipeIo.Pipes.Any(pipe => MonitorTypeIo.GetCemsMonitorTypes(pipe.Id)
            .Select(mt => GetPipeAdjustedRecord(pipe.Id, mt.Sid)
                .ToRecordStatus(mt, checkOverRange:true))
            .Any(recordStatus => recordStatus is Helper.RecordStatus.Abnormal
                or Helper.RecordStatus.OverRange));

        var pems = PipeIo.Pipes.Any(pipe => MonitorTypeIo.GetPemsMonitorTypes(pipe.Id)
            .Select(mt => GetPipeRawRecord(pipe.Id, mt.Sid)
                .ToRecordStatus(mt, checkOverRange:true))
            .Any(recordStatus => recordStatus is Helper.RecordStatus.Abnormal
                or Helper.RecordStatus.OverRange));

        return cems || pems;
    }

    private List<IMonitorType> GetCemsMonitorTypes(int pipeId)
    {
        var skipMonitorTypes = new List<string> { "A231", "A232" };
        return MonitorTypeIo.GetCemsMonitorTypes(pipeId).Where(mt => !skipMonitorTypes.Contains(mt.Sid)).ToList();
    }

    private List<IMonitorType> GetPemsMonitorTypes(int pipeId)
    {
        var skipMonitorTypes = new List<string>
        {
            MonitorTypeCode.BlowerSpeed1.ToString(),
            MonitorTypeCode.BlowerSpeed2.ToString(),
            MonitorTypeCode.BlowerSpeed3.ToString(),
            MonitorTypeCode.BlowerSpeed4.ToString(),
        };
        return MonitorTypeIo.GetPemsMonitorTypes(pipeId)
            .Where(mt=>!skipMonitorTypes.Contains(mt.Sid)).ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _timer = new Timer(_ =>
            {
                foreach (var pipe in PipeIo.Pipes)
                {
                    _pipeRawRecordMap[pipe.Id] =
                        DataCollectManager.GetCurrentRawRecordMap(pipe.Id);

                    var monitorTypes = MonitorTypeIo.GetCemsMonitorTypeSids(pipe.Id);

                    var copyOfRawRecordMap = new Dictionary<string, Record>();
                    //deep copy
                    foreach (var (key, value) in _pipeRawRecordMap[pipe.Id])
                    {
                        copyOfRawRecordMap[key] = new Record
                        {
                            Value = value.Value,
                            Status = value.Status,
                            Baf = value.Baf
                        };
                    }

                    var createDate = DateTime.Now;
                    var rawTimeDataMap = new Dictionary<DateTime, Dictionary<string, Record>>
                    {
                        { createDate, copyOfRawRecordMap }
                    };
                    var adjustedMap =
                        MeasuringAdjust.Get1MinAdjustedData(pipe.Id,
                            createDate, monitorTypes, rawTimeDataMap, false);

                    if (SiteConfig.PipeMonitorTypes[pipe.Id].Count(mtDef => mtDef.Sid == MonitorTypeCode.G11) > 0)
                    {
                        adjustedMap["G11"] =
                            MeasuringAdjust.GetAdjustRawOpRecord(pipe.Id, _pipeRawRecordMap[pipe.Id]["G11"]);
                    }

                    _pipeAdjustedRecordMap[pipe.Id] = adjustedMap;
                }

                _playAlert = EvaluateAlert();
                InvokeAsync(StateHasChanged);
            }, new AutoResetEvent(false), 0, 2000); // fire every 2000 milliseconds
        }

        base.OnAfterRender(firstRender);
    }

    Record? GetPipeRawRecord(int pipeId, string mt)
    {
        if (_pipeRawRecordMap.TryGetValue(pipeId, out var pipeRecordMap))
            return pipeRecordMap.TryGetValue(mt, out var record) ? record : null;

        return null;
    }

    Record? GetPipeAdjustedRecord(int pipeId, string mt)
    {
        if (_pipeAdjustedRecordMap.TryGetValue(pipeId, out var pipeRecordMap))
            return pipeRecordMap.TryGetValue(mt, out var record) ? record : null;

        return null;
    }

    string FormatValue(string sid, Record? record)
    {
        if (record?.Value is null)
            return "-";

        switch (sid)
        {
            case "EmExit":
                return record.Value == 0m ? "關閉" : "開啟";
                
            default:
                return $"{record.Value:F2}";        
        }
    }

    string FormatStatus(Record? record)
    {
        if (record is null)
            return "-";

        return MonitorTypeState.StateNameMap.TryGetValue(record.Status, out var stateName) ? stateName : record.Status;
    }

    string GetCurrentLoad(int pipeId) => PipeIo.PipeMap[pipeId].CurrentLoad?.ToString() ?? "-";

    string GetConvertedLoad(int pipeId)
    {
        var currentLoad = PipeIo.PipeMap[pipeId].CurrentLoad;
        return currentLoad != null ? DataCollectManager.GetConvertedLoad(currentLoad.Value).ToString("F2") : "-";
    }

    string GetNormalRange(int pipeId, string sid)
    {
        var mt = MonitorTypeIo.PipeMonitorTypeMap[pipeId][sid];
        if (mt is { Alarm: not null, AlarmLow: not null })
            return $"{mt.AlarmLow:F2} ~ {mt.Alarm:F2}";

        if (mt is { Alarm: not null })
            return $"< {mt.Alarm:F2}";

        if (mt is { AlarmLow: not null })
            return $"> {mt.AlarmLow:F2}";

        return "";
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}